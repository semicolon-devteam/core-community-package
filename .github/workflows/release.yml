# 🚀 자동 릴리스 워크플로우
# Gitmoji 기반 자동 버저닝 및 NPM 배포

name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: 🔍 Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔨 Build
        run: npm run build

      - name: 🧪 Test
        run: npm test
        continue-on-error: true

      - name: 🎯 Analyze commits and determine version bump
        id: version
        run: |
          # 최신 태그 가져오기
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.9.0")
          echo "Latest tag: $LATEST_TAG"

          # Gitmoji 기반 버전 결정
          COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")

          VERSION_BUMP="patch"

          # Breaking changes (Major)
          if echo "$COMMITS" | grep -q "💥\|:boom:"; then
            VERSION_BUMP="major"
          # New features (Minor)
          elif echo "$COMMITS" | grep -q "✨\|:sparkles:\|🚀\|:rocket:"; then
            VERSION_BUMP="minor"
          # Bug fixes (Patch)
          elif echo "$COMMITS" | grep -q "🐛\|:bug:\|🔧\|:wrench:\|📝\|:memo:\|♻️\|:recycle:\|🎨\|:art:"; then
            VERSION_BUMP="patch"
          fi

          echo "Version bump: $VERSION_BUMP"
          echo "bump=$VERSION_BUMP" >> $GITHUB_OUTPUT

      - name: 📝 Update version
        if: steps.version.outputs.bump != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # npm version 실행 (자동으로 git 태그 생성)
          npm version ${{ steps.version.outputs.bump }} -m "🔖 Release v%s

          Generated by GitHub Actions based on Gitmoji commits"

          # 새 버전 가져오기
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: 📤 Push changes
        if: steps.version.outputs.bump != ''
        run: |
          git push origin main --follow-tags

      - name: 📋 Create Release Notes
        if: steps.version.outputs.bump != ''
        id: release_notes
        run: |
          # 이전 태그부터 현재까지의 커밋 로그 수집
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" HEAD)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s")
          fi

          # 카테고리별로 커밋 분류
          BREAKING=$(echo "$COMMITS" | grep "💥\|:boom:" || true)
          FEATURES=$(echo "$COMMITS" | grep "✨\|:sparkles:\|🚀\|:rocket:" || true)
          FIXES=$(echo "$COMMITS" | grep "🐛\|:bug:" || true)
          OTHERS=$(echo "$COMMITS" | grep -v "💥\|:boom:\|✨\|:sparkles:\|🚀\|:rocket:\|🐛\|:bug:" || true)

          # Release Notes 생성
          NOTES="# Release v$NEW_VERSION\n\n"

          if [ -n "$BREAKING" ]; then
            NOTES="${NOTES}## 💥 Breaking Changes\n$BREAKING\n\n"
          fi

          if [ -n "$FEATURES" ]; then
            NOTES="${NOTES}## ✨ New Features\n$FEATURES\n\n"
          fi

          if [ -n "$FIXES" ]; then
            NOTES="${NOTES}## 🐛 Bug Fixes\n$FIXES\n\n"
          fi

          if [ -n "$OTHERS" ]; then
            NOTES="${NOTES}## 📝 Other Changes\n$OTHERS\n\n"
          fi

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release
        if: steps.version.outputs.bump != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: v${{ env.NEW_VERSION }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: 📦 Publish to NPM
        if: steps.version.outputs.bump != ''
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📢 Notify Success
        if: success() && steps.version.outputs.bump != ''
        run: |
          echo "✅ Successfully released v$NEW_VERSION"
          echo "📦 Package: https://www.npmjs.com/package/@team-semicolon/community-core"
          echo "🎉 Release: https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION"